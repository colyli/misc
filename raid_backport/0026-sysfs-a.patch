From 7b1485bab9c49b0d3811d72beb0de60c7b8b337d Mon Sep 17 00:00:00 2001
From: NeilBrown <neilb@suse.de>
Date: Mon, 15 Dec 2014 12:56:59 +1100
Subject: [PATCH] md/raid5: use ->lock to protect accessing raid5 sysfs
 attributes.
Git-commit: 7b1485bab9c49b0d3811d72beb0de60c7b8b337d
Patch-mainline: v4.0-rc1
Reference: bsc#953048

It is important that mddev->private isn't freed while
a sysfs attribute function is accessing it.

So use mddev->lock to protect the setting of ->private to NULL, and
take that lock when checking ->private for NULL and de-referencing it
in the sysfs access functions.

This only applies to the read ('show') side of access.  Write
access will be handled separately.

(colyli: patches.fixes/0006-md-raid5-use-lock-to-protect-accessing-raid5-sysfs-a.patch is
 in SUSE kernel already, but missed 1 patching part, so this patch adds this missing one.)

Signed-off-by: NeilBrown <neilb@suse.de>
Signed-off-by: Coly Li <colyli@suse.de>

---
 drivers/md/raid5.c |   11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -5471,11 +5471,14 @@ raid5_preread_bypass_threshold = __ATTR(
 static ssize_t
 raid5_show_skip_copy(struct mddev *mddev, char *page)
 {
-	struct r5conf *conf = mddev->private;
+	struct r5conf *conf;
+	int ret = 0;
+	spin_lock(&mddev->write_lock);
+	conf = mddev->private;
 	if (conf)
-		return sprintf(page, "%d\n", conf->skip_copy);
-	else
-		return 0;
+		ret = sprintf(page, "%d\n", conf->skip_copy);
+	spin_unlock(&mddev->write_lock);
+	return ret;
 }
 
 static ssize_t
