From c5e19d906a658f27fa858b09a95d9551b1a69bd0 Mon Sep 17 00:00:00 2001
From: NeilBrown <neilb@suse.com>
Date: Fri, 17 Jul 2015 12:06:02 +1000
Subject: [PATCH] md: be careful when testing resync_max against
 curr_resync_completed.
Git-commit: c5e19d906a658f27fa858b09a95d9551b1a69bd0
Patch-mainline: v4.3-rc1
Reference: bsc#953048

While it generally shouldn't happen, it is not impossible for
curr_resync_completed to exceed resync_max.
This can particularly happen when reshaping RAID5 - the current
status isn't copied to curr_resync_completed promptly, so when it
is, it can exceed resync_max.
This happens when the reshape is 'frozen', resync_max is set low,
and reshape is re-enabled.

Taking a difference between two unsigned numbers is always dangerous
anyway, so add a test to behave correctly if
   curr_resync_completed > resync_max

Signed-off-by: NeilBrown <neilb@suse.com>
Signed-off-by: Coly Li <colyli@suse.de>

---
 drivers/md/md.c    |    3 ++-
 drivers/md/raid5.c |    3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -7914,7 +7914,8 @@ void md_do_sync(struct md_thread *thread
 		      > (max_sectors >> 4)) ||
 		     time_after_eq(jiffies, update_time + UPDATE_FREQUENCY) ||
 		     (j - mddev->curr_resync_completed)*2
-		     >= mddev->resync_max - mddev->curr_resync_completed
+		     >= mddev->resync_max - mddev->curr_resync_completed ||
+		     mddev->curr_resync_completed > mddev->resync_max
 			    )) {
 			/* time to update curr_resync_completed */
 			wait_event(mddev->recovery_wait,
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -5504,7 +5504,8 @@ static sector_t reshape_request(struct m
 	sector_nr += reshape_sectors;
 	retn = reshape_sectors;
 finish:
-	if ((sector_nr - mddev->curr_resync_completed) * 2
+	if (mddev->curr_resync_completed > mddev->resync_max ||
+	    (sector_nr - mddev->curr_resync_completed) * 2
 	    >= mddev->resync_max - mddev->curr_resync_completed) {
 		/* Cannot proceed until we've updated the superblock... */
 		wait_event(conf->wait_for_overlap,
